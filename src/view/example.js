import Sticker from '../model/Sticker';

export default function example() {
    const makeSticker = (title, content, keyWords, adress) => {
        const sticker = new Sticker({ title, content, keyWords, adress });
        sticker.create();
        sticker.show();
    }
    makeSticker('Become an expert in JavaScript', 'As soon as posible', 'учёба');
    makeSticker('ВДНХ на карте', 'Посетить выставку промышленного оборудования (пищевая пром-ть; станки для бахил и т.п.)', 'бизнес', 'Пр-т Мира, 119, Москва');
    makeSticker('Learn React', 'On middle level', 'учёба');
    makeSticker('Карнавал в Рио-Де-Жанейро', 'Традиционно перед началом Великого поста,)', 'фестивали, путешествия', 'Рио-Де-Жанейро');
    makeSticker('Learn Node.JS', 'And develop multi-user services', 'учёба');
    makeSticker('День королевы в Нидерландах', 'Ежегодно 30 апреля в Амстердаме празднуется День коронации правящей королевы Беатрикс', 'путешествия', 'Амстердам');
    makeSticker('To find a cool job', 'With good salary', 'деньги');
    makeSticker('Питер, Фонтанка', 'Нужно съездить как-нибудь', 'путешествия', 'Питер, Фонтанка');

    makeSticker('Бинарный поиск', `Поиск элемента в отсортированном массиве:
    1. Определение значения элемента в середине структуры данных. Полученное значение сравнивается с ключом.
    2. Если ключ меньше значения середины, то поиск осуществляется в первой половине элементов, иначе — во второй.
    3. оиск сводится к тому, что вновь определяется значение серединного элемента в выбранной половине и сравнивается с ключом.
    4. Процесс продолжается до тех пор, пока не будет найден элемент со значением ключа или не станет пустым интервал для поиска.`, 'алгоритмы, учёба, программирование');
    makeSticker('Фестиваль Боди-Арта в Австрии', 'Каждый год в последний день июня проводится красочный фестиваль боди-арта, куда приезжают тысячи иностранных туристов со всего мира. Подобный праздник отмечается с 1998 года и каждый год производит неизгладимое впечатление на зрителей. Любой желающий может стать моделью для собравшихся здесь художников. ', 'фестивали, путешествия', 'Австрия,  Крумпердорф-Вёртер-Зе');

    makeSticker('SOLID', `
    * Single responsibility - каждый класс выполняет лишь одну задачу. 

    * Open-closed - программные сущности … должны быть открыты для расширения, но закрыты для модификации.

    * Liskov substitution - Наследующий класс должен дополнять, а не изменять базовый. 

    * Interface segregation - много интерфейсов, специально предназначенных для клиентов, лучше, чем один интерфейс общего назначения.

    * Dependency inversion - Зависимость на Абстракциях. Нет зависимости на что-то конкретное.
    `, 'принципы, учёба, программирование');

    makeSticker('Model-View-Presenter', `
    - используется в основном для построения пользовательского интерфейса.

    Элемент Presenter в данном шаблоне берёт на себя функциональность посредника (аналогично контроллеру в MVC) и отвечает за управление событиями пользовательского интерфейса (например, использование мыши) так же, как в других шаблонах обычно отвечает представление.
    
    MVP — шаблон проектирования пользовательского интерфейса, который был разработан для облегчения автоматического модульного тестирования и улучшения разделения ответственности в презентационной логике (отделения логики от отображения)
    `, 'программирование, учёба, шаблоны проектирования');

    const ex = document.getElementById('example');
    // ex.remove();
}